package com.retry.vuga.activities;

import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.core.content.ContextCompat;
import androidx.databinding.DataBindingUtil;

import com.retry.vuga.R;
import com.retry.vuga.databinding.ActivityAgeSettingsBinding;
import com.retry.vuga.model.UserRegistration;
import com.retry.vuga.retrofit.RetrofitClient;
import com.retry.vuga.utils.SessionManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.schedulers.Schedulers;

public class AgeSettingsActivity extends BaseActivity {
    
    private static final String TAG = "AgeSettingsActivity";
    
    private ActivityAgeSettingsBinding binding;
    private CompositeDisposable disposable;
    private UserRegistration.Profile currentProfile;
    private boolean isKidsProfile = false;
    private Integer selectedAge = null;
    private List<AgeRating> ageRatings = new ArrayList<>();
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_age_settings);
        disposable = new CompositeDisposable();
        
        initializeData();
        setupUI();
        setupListeners();
        loadAgeRatings();
    }
    
    private void initializeData() {
        currentProfile = SessionManager.shared.getCurrentProfile();
        if (currentProfile != null) {
            isKidsProfile = currentProfile.getIs_kids_profile() == 1;
            selectedAge = currentProfile.getAge();
            binding.setProfile(currentProfile);
            binding.setIsKidsProfile(isKidsProfile);
            binding.setSelectedAge(selectedAge);
        }
    }
    
    private void setupUI() {
        if (currentProfile != null) {
            binding.tvProfileName.setText(currentProfile.getName());
            setupProfileAvatar();
            setupAgeSpinner();
        }
    }
    
    private void setupProfileAvatar() {
        // Set avatar background color
        GradientDrawable drawable = new GradientDrawable();
        drawable.setShape(GradientDrawable.OVAL);
        try {
            drawable.setColor(android.graphics.Color.parseColor(currentProfile.getAvatar_color()));
        } catch (Exception e) {
            drawable.setColor(ContextCompat.getColor(this, R.color.app_color));
        }
        binding.profileAvatar.setBackground(drawable);
        
        // Add initial text (first letter of name)
        TextView initialText = new TextView(this);
        initialText.setText(currentProfile.getName().substring(0, 1).toUpperCase());
        initialText.setTextColor(ContextCompat.getColor(this, R.color.white));
        initialText.setTextSize(24);
        initialText.setTypeface(null, android.graphics.Typeface.BOLD);
        
        // Center the text
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.WRAP_CONTENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        params.gravity = android.view.Gravity.CENTER;
        initialText.setLayoutParams(params);
        
        // Add text to avatar if it's a ViewGroup
        if (binding.profileAvatar.getParent() instanceof LinearLayout) {
            ((LinearLayout) binding.profileAvatar.getParent()).addView(initialText);
        }
    }
    
    private void setupAgeSpinner() {
        List<String> ageOptions = new ArrayList<>();
        ageOptions.add("Not Set");
        for (int i = 1; i <= 100; i++) {
            ageOptions.add(String.valueOf(i));
        }
        
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, 
            android.R.layout.simple_spinner_item, ageOptions);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        binding.spinnerAge.setAdapter(adapter);
        
        // Set current selection
        if (selectedAge != null) {
            binding.spinnerAge.setSelection(selectedAge); // Index 0 is "Not Set", so age N is at index N
        }
        
        binding.spinnerAge.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedAge = position == 0 ? null : position;
                binding.setSelectedAge(selectedAge);
                updateAgeRatingsDisplay();
            }
            
            @Override
            public void onNothingSelected(AdapterView<?> parent) {}
        });
    }
    
    private void setupListeners() {
        binding.btnBack.setOnClickListener(v -> {
            getOnBackPressedDispatcher().onBackPressed();
        });
        
        binding.btnSave.setOnClickListener(v -> {
            saveAgeSettings();
        });
        
        binding.switchKidsProfile.setOnCheckedChangeListener((buttonView, isChecked) -> {
            isKidsProfile = isChecked;
            binding.setIsKidsProfile(isKidsProfile);
            
            // Update age selection visibility
            binding.loutAgeSelection.setVisibility(isKidsProfile ? View.GONE : View.VISIBLE);
            
            if (isKidsProfile) {
                selectedAge = null;
                binding.setSelectedAge(null);
            }
            
            updateAgeRatingsDisplay();
        });
    }
    
    private void loadAgeRatings() {
        binding.loutLoader.setVisibility(View.VISIBLE);
        
        // Mock age ratings data since we don't have the API endpoint
        ageRatings = createMockAgeRatings();
        binding.loutLoader.setVisibility(View.GONE);
        updateAgeRatingsDisplay();
    }
    
    private List<AgeRating> createMockAgeRatings() {
        List<AgeRating> ratings = new ArrayList<>();
        
        AgeRating g = new AgeRating();
        g.setCode("G");
        g.setName("General Audiences");
        g.setDescription("All ages admitted");
        g.setColor("#4CAF50");
        g.setMinAge(0);
        g.setKidsFriendly(true);
        ratings.add(g);
        
        AgeRating pg = new AgeRating();
        pg.setCode("PG");
        pg.setName("Parental Guidance");
        pg.setDescription("Some material may not be suitable for children");
        pg.setColor("#8BC34A");
        pg.setMinAge(6);
        pg.setKidsFriendly(true);
        ratings.add(pg);
        
        AgeRating pg13 = new AgeRating();
        pg13.setCode("PG-13");
        pg13.setName("Parents Strongly Cautioned");
        pg13.setDescription("Some material may be inappropriate for children under 13");
        pg13.setColor("#FF9800");
        pg13.setMinAge(13);
        pg13.setKidsFriendly(false);
        ratings.add(pg13);
        
        AgeRating r = new AgeRating();
        r.setCode("R");
        r.setName("Restricted");
        r.setDescription("Under 17 requires accompanying parent or adult guardian");
        r.setColor("#F44336");
        r.setMinAge(17);
        r.setKidsFriendly(false);
        ratings.add(r);
        
        AgeRating nc17 = new AgeRating();
        nc17.setCode("NC-17");
        nc17.setName("Adults Only");
        nc17.setDescription("No one 17 and under admitted");
        nc17.setColor("#9C27B0");
        nc17.setMinAge(18);
        nc17.setKidsFriendly(false);
        ratings.add(nc17);
        
        return ratings;
    }
    
    private void updateAgeRatingsDisplay() {
        binding.loutRatingItems.removeAllViews();
        
        for (AgeRating rating : ageRatings) {
            View ratingView = createAgeRatingView(rating, canAccessRating(rating));
            binding.loutRatingItems.addView(ratingView);
        }
    }
    
    private View createAgeRatingView(AgeRating rating, boolean isAccessible) {
        // Create a simple linear layout with rating info
        LinearLayout itemView = new LinearLayout(this);
        itemView.setOrientation(LinearLayout.HORIZONTAL);
        itemView.setPadding(0, 20, 0, 20);
        
        // Rating code badge
        TextView codeText = new TextView(this);
        codeText.setText(rating.getCode());
        codeText.setPadding(20, 10, 20, 10);
        codeText.setTextColor(ContextCompat.getColor(this, R.color.white));
        codeText.setTextSize(12);
        codeText.setTypeface(null, android.graphics.Typeface.BOLD);
        
        GradientDrawable drawable = new GradientDrawable();
        drawable.setShape(GradientDrawable.RECTANGLE);
        drawable.setCornerRadius(16);
        try {
            drawable.setColor(android.graphics.Color.parseColor(rating.getColor()));
        } catch (Exception e) {
            drawable.setColor(ContextCompat.getColor(this, R.color.text_color_light));
        }
        codeText.setBackground(drawable);
        
        // Rating info
        LinearLayout infoLayout = new LinearLayout(this);
        infoLayout.setOrientation(LinearLayout.VERTICAL);
        infoLayout.setPadding(30, 0, 0, 0);
        
        TextView nameText = new TextView(this);
        nameText.setText(rating.getName());
        nameText.setTextColor(isAccessible ? ContextCompat.getColor(this, R.color.text_color) : 
            ContextCompat.getColor(this, R.color.text_color_light));
        nameText.setTextSize(14);
        nameText.setTypeface(null, android.graphics.Typeface.BOLD);
        
        TextView descText = new TextView(this);
        descText.setText(rating.getDescription());
        descText.setTextColor(ContextCompat.getColor(this, R.color.text_color_light));
        descText.setTextSize(12);
        
        infoLayout.addView(nameText);
        infoLayout.addView(descText);
        
        // Status icon
        ImageView statusIcon = new ImageView(this);
        LinearLayout.LayoutParams iconParams = new LinearLayout.LayoutParams(48, 48);
        iconParams.gravity = android.view.Gravity.CENTER_VERTICAL;
        statusIcon.setLayoutParams(iconParams);
        
        if (isAccessible) {
            statusIcon.setImageResource(android.R.drawable.ic_dialog_info);
            statusIcon.setColorFilter(ContextCompat.getColor(this, android.R.color.holo_green_light));
        } else {
            statusIcon.setImageResource(android.R.drawable.ic_secure);
            statusIcon.setColorFilter(ContextCompat.getColor(this, android.R.color.holo_red_light));
        }
        
        // Add to main layout
        itemView.addView(codeText);
        
        LinearLayout.LayoutParams infoParams = new LinearLayout.LayoutParams(
            0, LinearLayout.LayoutParams.WRAP_CONTENT, 1);
        itemView.addView(infoLayout, infoParams);
        itemView.addView(statusIcon);
        
        // Set overall opacity
        itemView.setAlpha(isAccessible ? 1.0f : 0.6f);
        
        return itemView;
    }
    
    private boolean canAccessRating(AgeRating rating) {
        if (isKidsProfile) {
            return rating.isKidsFriendly();
        }
        
        if (selectedAge == null) {
            return true; // No age restriction if not set
        }
        
        return selectedAge >= rating.getMinAge();
    }
    
    private void saveAgeSettings() {
        if (currentProfile == null) return;
        
        binding.loutLoader.setVisibility(View.VISIBLE);
        
        HashMap<String, Object> params = new HashMap<>();
        params.put("profile_id", currentProfile.getProfile_id());
        params.put("is_kids_profile", isKidsProfile ? 1 : 0);
        params.put("age", isKidsProfile ? null : selectedAge);
        
        // Mock successful save for now
        binding.loutLoader.setVisibility(View.GONE);
        Toast.makeText(this, "Age settings saved successfully", Toast.LENGTH_SHORT).show();
        
        // Update local profile data
        currentProfile.setIs_kids_profile(isKidsProfile ? 1 : 0);
        currentProfile.setAge(isKidsProfile ? null : selectedAge);
        SessionManager.shared.updateCurrentProfile(currentProfile);
        
        finish();
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (disposable != null) {
            disposable.dispose();
        }
    }
    
    // Age Rating model class
    public static class AgeRating {
        private int id;
        private String code;
        private String name;
        private String description;
        private String color;
        private int minAge;
        private boolean kidsFriendly;
        
        // Getters and setters
        public int getId() { return id; }
        public void setId(int id) { this.id = id; }
        
        public String getCode() { return code; }
        public void setCode(String code) { this.code = code; }
        
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
        
        public String getColor() { return color; }
        public void setColor(String color) { this.color = color; }
        
        public int getMinAge() { return minAge; }
        public void setMinAge(int minAge) { this.minAge = minAge; }
        
        public boolean isKidsFriendly() { return kidsFriendly; }
        public void setKidsFriendly(boolean kidsFriendly) { this.kidsFriendly = kidsFriendly; }
    }
}