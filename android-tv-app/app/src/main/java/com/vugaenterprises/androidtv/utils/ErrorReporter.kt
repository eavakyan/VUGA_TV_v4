package com.vugaenterprises.androidtv.utils

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.widget.Toast
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ErrorReporter @Inject constructor(
    @ApplicationContext private val context: Context,
    private val errorLogger: ErrorLogger
) {
    companion object {
        private const val ADMIN_EMAIL = "support@vugaenterprises.com"
        private const val SUBJECT_PREFIX = "[VUGA TV Error Report]"
    }
    
    suspend fun sendErrorReport(errorCode: String? = null) {
        withContext(Dispatchers.Main) {
            try {
                val errorLogs = errorLogger.getErrorLogs()
                val reportBody = buildErrorReport(errorLogs, errorCode)
                
                val intent = Intent(Intent.ACTION_SENDTO).apply {
                    data = Uri.parse("mailto:")
                    putExtra(Intent.EXTRA_EMAIL, arrayOf(ADMIN_EMAIL))
                    putExtra(Intent.EXTRA_SUBJECT, "$SUBJECT_PREFIX ${errorCode ?: "General Error"}")
                    putExtra(Intent.EXTRA_TEXT, reportBody)
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                }
                
                if (intent.resolveActivity(context.packageManager) != null) {
                    context.startActivity(intent)
                } else {
                    Toast.makeText(
                        context,
                        "No email app found. Error code: ${errorCode ?: "Unknown"}",
                        Toast.LENGTH_LONG
                    ).show()
                }
            } catch (e: Exception) {
                Toast.makeText(
                    context,
                    "Failed to prepare error report",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
    }
    
    private suspend fun buildErrorReport(
        errorLogs: List<ErrorLog>,
        specificErrorCode: String? = null
    ): String {
        val deviceInfo = """
            Device Information:
            - Model: ${Build.MODEL}
            - Manufacturer: ${Build.MANUFACTURER}
            - Android Version: ${Build.VERSION.RELEASE} (SDK ${Build.VERSION.SDK_INT})
            - App Version: ${getAppVersion()}
            - Device ID: ${Build.ID}
            
        """.trimIndent()
        
        val relevantLogs = if (specificErrorCode != null) {
            errorLogs.filter { it.errorCode == specificErrorCode }
        } else {
            errorLogs.take(10) // Last 10 errors
        }
        
        val logsSection = if (relevantLogs.isNotEmpty()) {
            """
            Recent Error Logs:
            ${relevantLogs.joinToString("\n\n") { log ->
                """
                Time: ${log.timestamp}
                Code: ${log.errorCode}
                Type: ${log.errorType}
                Message: ${log.errorMessage}
                ${log.stackTrace?.let { "Stack: ${it.take(200)}..." } ?: ""}
                """.trimIndent()
            }}
            """.trimIndent()
        } else {
            "No error logs available."
        }
        
        return """
            $deviceInfo
            
            $logsSection
            
            ---
            This error report was automatically generated by VUGA TV app.
            Please do not modify the error codes when reporting issues.
        """.trimIndent()
    }
    
    private fun getAppVersion(): String {
        return try {
            val packageInfo = context.packageManager.getPackageInfo(context.packageName, 0)
            "${packageInfo.versionName} (${packageInfo.versionCode})"
        } catch (e: Exception) {
            "Unknown"
        }
    }
}